#! /bin/ksh

#########################################################################
# Shell script to build (modular) code from hierarchical directory tree
#########################################################################


# NOTE: arguments to build-code pass directly to the C compiler

if [ $# -gt 0 ] ; then
    echo "compiler arguments:" $@ 
fi


#########################################################################
# Local environment
# This tries to read a Machine-configuration for this hostname and use
# that to define paths etc for building the code
#########################################################################

# First, the machine type


OS=`uname -s`-`uname -r | sed -e "s/ /_/"`
OSARCH=`uname -s`-`arch`

echo "Operating system " $OS

# Second figure out where the appropriate directories are ...

if [ -e build-code ] ; then
  CWD=`pwd`
  TOP_DIR=`cd .. ; pwd`
    elif [ `echo $0 | sed -e "s:^\/.*:/:"` = '/' ] ; 
      then 
	 TOP_DIR=`echo $0 | sed -e "s:\/Shell_scripts\/build-code::"` 
      else  
	 REL_PATH=`echo $0 | sed -e "s/\/build-code//"`
	 SHELL_DIR=`pwd`/$REL_PATH
	 TOP_DIR=` cd $SHELL_DIR/.. ; pwd `
    fi
    

echo $0 | sed -e "s:^\/.*:/:"

# if automounter running then pwd may return an annoying /tmp_mnt (or similar) which is removed here

TOP_DIR=`echo $TOP_DIR | sed -e "s:\/tmp_mnt::"`

echo ""
echo "Building code modules found in $TOP_DIR"


# Defaults for libraries and so on

FFTLIB="" # "$TOP_DIR/Related.software/lib/realfft-$OS.a $TOP_DIR/Related.software/lib/fft-$OS.a"
#COMPRESS="gzip"  DAS - 21-01-03, comment this out for gzip addition
LIB="-lm" #"/home/limbo1/louis/Software/lib/libdmalloc.a /home/limbo1/louis/Software/lib/libdmalloclp.a -lm"



#########################################################################
# Operating system environment
#########################################################################

# Defaults

CC=gcc
CEXT=c      # C files are filename.$CEXT
OBJEXT=o    # Object files are filename.$OBJEXT
OBJFLAG=-c  # flag which makes cc produce object file
FLAGS=""
LDFLAGS=""
OPTIM=""

OS_DESC=OS-specifics-$OS

# Resident information about OS

if [ -e $TOP_DIR/Shell_scripts/$OS_DESC ] ; then
  echo "Operating system information found for $OS"
  . $TOP_DIR/Shell_scripts/$OS_DESC
else
  echo "There is no specific information about the operating system"
  echo "Create a file $TOP_DIR/Shell_scripts/$OS_DESC to tell this script about special flags etc"
fi

# Add a tag to object file to include OS name (in case all machines use .o)

OBJEXT=$OSARCH.$OBJEXT


echo "Compiler $CC"

#########################################################################################
# But now check to see if there are any specific configuration requirements for this host
#########################################################################################

# DAS: Work out hostname properly
HOSTNAME=`uname -n`

CUSTOM_FILE="HOST-specifics-$HOSTNAME"
if [ -f $TOP_DIR/Shell_scripts/$CUSTOM_FILE ] ; then
  echo "Loading local customizations for host \"$HOSTNAME\" "
  echo "  "
    . $TOP_DIR/Shell_scripts/$CUSTOM_FILE
    
    OSARCH=$OSARCH.$HOSTNAME
    OBJEXT=$HOSTNAME.$OBJEXT

else
  echo "No local customizations ... " $TOP_DIR/Shell_scripts/$CUSTOM_FILE "Not found"
fi





#########################################################
# Directories (relative to $TOP_DIR) to include for build 
#########################################################

BUILD_LOG="Build.log"
BUILD_DIR1="Source_code"



this_dir=`pwd`
cd $TOP_DIR
BUILD_DIR=`echo $BUILD_DIR1`
cd $this_dir

if [ -f $BUILD_LOG ] ; then
  mv $BUILD_LOG $BUILD_LOG.previous
fi

#########################################################
# The rest should be automatic from here on
#########################################################

CFILES=""
OBJFILES=""
HFILES="$TOP_DIR/Source_code/global_defs.h $TOP_DIR/Source_code/element_definitions.h"

echo ""
echo "Working, please be patient"
echo ""


########################################################
# Initialize log file
########################################################

echo "Ellipsis: build log"  > ${BUILD_LOG}
echo `date` >> ${BUILD_LOG}
echo "Operating system: $OS" >> ${BUILD_LOG}

#########################################################
# Build header file information
#########################################################

echo "============================" >> ${BUILD_LOG}
echo "Header file infomation:" >> $BUILD_LOG

WORKFILE=$TOP_DIR/Source_code/_new_options_definitions_files.h
echo "/* This file generated automatically - edits will not be preserved */" > $WORKFILE
for directory in $BUILD_DIR ; do
  for file in $TOP_DIR/$directory/*global_definitions.h ; do
    if [ -f $file ] ; then
      echo "#include \"$file\" " >> $WORKFILE
      echo $file >> $BUILD_LOG
      HFILES="$HFILES $file"
    fi
  done
done

if [ ! -f $TOP_DIR/Source_code/_options_definitions_files.h ] ; then 
  mv $TOP_DIR/Source_code/_new_options_definitions_files.h $TOP_DIR/Source_code/_options_definitions_files.h
  differences="2"
else
  differences=`diff $TOP_DIR/Source_code/_new_options_definitions_files.h $TOP_DIR/Source_code/_options_definitions_files.h`

  if [ -n "$differences" ] ;   then
    mv $TOP_DIR/Source_code/_new_options_definitions_files.h $TOP_DIR/Source_code/_options_definitions_files.h
  else
    rm -f $TOP_DIR/Source_code/_new_options_definitions_files.h
  fi
fi

WORKFILE=$TOP_DIR/Source_code/_new_options_variables_files.h
echo "/* This file generated automatically - edits will not be preserved */" > $WORKFILE
for directory in $BUILD_DIR ; do
  for file in $TOP_DIR/$directory/*global_variables.h ; do
    if [ -f $file ] ;  then
      echo "#include \"$file\" " >> $WORKFILE
      echo $file >> $BUILD_LOG
      HFILES="$HFILES $file"
    fi
  done
done 

if [ ! -f $TOP_DIR/Source_code/_options_variables_files.h ] ; then 
  mv $TOP_DIR/Source_code/_new_options_variables_files.h $TOP_DIR/Source_code/_options_variables_files.h
  differences1="2"
else
  differences1=`diff $TOP_DIR/Source_code/_new_options_variables_files.h $TOP_DIR/Source_code/_options_variables_files.h`
  if [ -n "$differences1" ] ;   then
    mv $TOP_DIR/Source_code/_new_options_variables_files.h $TOP_DIR/Source_code/_options_variables_files.h
  else
  rm -f $TOP_DIR/Source_code/_new_options_variables_files.h
  fi
fi

# Remove out of date object files 

# 1. All files if the header files are different
if [ -n "$differences" -o -n "$differences1" ] ; then
  echo "File tree has changed, removing old object files"
  for directory in $BUILD_DIR ; do
    for file in $TOP_DIR/$directory/*.$OBJEXT ; do
      if [ -f $file ] ; then
	rm -f $file
      fi
    done
  done
else
# 2. Should also check if any .h files are newer than any .o files
  for directory in $BUILD_DIR ; do
    for file in $TOP_DIR/$directory/*.$OBJEXT ; do
      if [ -f $file ] ; then
	find $file \( ! -newer $TOP_DIR/Source_code/_options_variables_files.h -o\
	 ! -newer $TOP_DIR/Source_code/_options_definitions_files.h -o ! -newer $TOP_DIR/Source_code/global_defs.h \) -exec rm {} \;
      fi
    done
  done
fi


###################################################################
#  Source Files: check out of date object files & compile
###################################################################

echo "============================" >> ${BUILD_LOG}
echo "Source file infomation:" >> $BUILD_LOG

ERRORS=""

for directory in $BUILD_DIR ; do
  (
  cd $TOP_DIR/$directory
  for file in *.$CEXT ; do
    if [ -f $file ] ; then
      objfile=`echo $file | sed -e "s/\\.c$/\\.${OBJEXT}/"`
      if [ -f $objfile ] ; then 
      find . \( -name $file -a -newer $objfile \) -prune -exec rm $objfile \;
      fi
    fi
  done
  )
done

unset ERRORS

for directory in $BUILD_DIR ; do
  for file in $TOP_DIR/$directory/*.$CEXT ; do
    if [ -f $file ] ; then
      objfile=`echo $file | sed -e "s/\\.c$/\\.${OBJEXT}/"`
      echo "$file">> $BUILD_LOG
      CFILES="$CFILES $file"
      OBJFILES="$OBJFILES $objfile"

      if [ ! -f $objfile ] ; then
        #echo "Compiling $objfile " #DAS: 21-01-03, bugfix
	#$CC -o $objfile $@ $OPTIM $FLAGS $OBJFLAG -DCOMPRESS_BINARY=\"$COMPRESS\" $file -I$TOP_DIR/Source_code  #DAS: 21-01-03, bugfix
	echo "Compiling `echo $objfile | sed "s/.*\///"` "
	$CC -o $objfile $@ $OPTIM $FLAGS $OBJFLAG $file -I$TOP_DIR/Source_code
      fi

      if [ ! -f $objfile ] ; then
	ERRORS="$ERRORS $file"
      fi
    fi
  done
done

if [ -n "$ERRORS" ] ; then
  echo "Error compiling the following file or files"
  for file in $ERRORS ; do
    echo $file
  done
  exit
fi


###################################################################
#  TAGS file for emacs
###################################################################

# etags --output $TOP_DIR/TAGS $CFILES $HFILES

###################################################################
# Link the object files to make the executable
###################################################################

cd $TOP_DIR/Source_code

echo Compiling executable: dotdotdot-$OSARCH
$CC -o dotdotdot-$OSARCH $@ $LDFLAGS $OBJFILES $FFTLIB $LIB
if [ -f dotdotdot-$OSARCH ] ; then 
  mv dotdotdot-$OSARCH ..
fi
